#!/bin/bash
#
# Delete all AWS resources in an account
#
set -e

function set_asgs_num_desired_instances_to_zero {
    echo "Setting all Auto Scaling Groups' desired capacity to 0 in region $1."
    asgs=($(aws autoscaling describe-auto-scaling-groups --region $1 | jq '.AutoScalingGroups[] | {AutoScalingGroupName}' | jq --raw-output '.AutoScalingGroupName'))

    for asg in ${asgs[@]}; do
        echo "   Setting desired capacity to 0 for $asg"
        aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${asg} --min-size 0 --desired-capacity 0 --region $1
    done
}

function delete_asgs {
    echo "Deleting all Auto Scaling Groups in region $1..."
    asgs=($(aws autoscaling describe-auto-scaling-groups --region $1 | jq '.AutoScalingGroups[] | {AutoScalingGroupName}' | jq --raw-output '.AutoScalingGroupName'))

    for asg in ${asgs[@]}; do
        echo "   Deleting $asg"
        aws autoscaling delete-auto-scaling-group --auto-scaling-group-name ${asg} --region $1
    done
}

function nuke_ec2 {
    echo "Deleting all unprotected EC2 instances in region $1..."
    instances=($(aws ec2 describe-instances --region $1 | jq '.Reservations[].Instances[] | select(.State.Name == "running")' | jq --raw-output '.InstanceId'))

    for instance in ${instances[@]}; do
        #Do not attempt to delete protected instances
        protected=$(aws ec2 describe-instance-attribute --instance-id $instance \
        --attribute disableApiTermination --query [DisableApiTermination] \
        --region $1 | jq '.[] | {Value}' | jq --raw-output '.Value')
        if [[ "$protected" = false ]] ; then
            echo "   Deleting $instance"
            aws ec2 terminate-instances --instance-id ${instance} --region $1 
        fi
    done
}

function nuke_elbs {
    echo "Deleting all classic ELBs in region $1..."
    elbs=($(aws elb describe-load-balancers --region $1 | jq '.LoadBalancerDescriptions[] | {LoadBalancerName}' | jq --raw-output '.LoadBalancerName'))

    for elb in ${elbs[@]}; do
        echo "   Deleting $elb"
        aws elb delete-load-balancer --load-balancer-name ${elb} --region $1
    done
}

function nuke_elbsv2 {
    echo "Deleting all v2 Load Balancers in region $1..."
    lbs=($(aws elbv2 describe-load-balancers --region $1 | jq '.LoadBalancers[] | {LoadBalancerArn}' | jq --raw-output '.LoadBalancerArn'))

    for lb in ${lbs[@]}; do
        echo "   Deleting $lb"
        aws elbv2 delete-load-balancer --load-balancer-arn ${lb} --region $1 
    done
}

function nuke_ebs {
    echo "Deleting all unattached EBS volumes in region $1..."
    volumes=($(aws ec2 describe-volumes --filters Name=status,Values=available --region $1 | jq '.Volumes[] | {VolumeId}' | jq --raw-output '.VolumeId'))

    for volume in ${volumes[@]}; do
        echo "   Deleting $volume"
        aws ec2 delete-volume --volume-id ${volume} --region $1 
    done
}

function nuke_eni {
    echo "Deleting all unattached ENI in region $1..."
    enis=($(aws ec2 describe-network-interfaces --filters Name=status,Values=available --region $1 | jq '.NetworkInterfaces[] | {NetworkInterfaceId}' | jq --raw-output '.NetworkInterfaceId'))

    for eni in ${enis[@]}; do
        echo "   Deleting $eni"
        aws ec2 delete-network-interface --network-interface-id ${eni} --region $1 
    done
}

function nuke_security_groups {
    echo "Deleting all unused Security Groups in region $1"
    security_groups=($(comm -23 <(aws ec2 describe-security-groups --region $1 --query 'SecurityGroups[*].GroupId' --output text | tr '\t' '\n'| sort) <(aws ec2 describe-instances --region $1 --query 'Reservations[*].Instances[*].SecurityGroups[*].GroupId' --output text | tr '\t' '\n' | sort | uniq)))

    for security_group in ${security_groups[@]}; do
        echo "   Deleting $security_group"
        aws ec2 delete-security-group --group-id ${security_group} --region $1 || true
    done
}

function nuke_elastic_ips {
    echo "Deleting all unused Elastic IPs in region $1"
    eips=($(aws ec2 describe-addresses --region $1 | jq '.Addresses[] | select(has("AssociationId") | not) | {AllocationId}' | jq --raw-output '.AllocationId'))
    for eip in ${eips[@]}; do
        echo "   Deleting $eip"
        aws ec2 release-address --allocation-id ${eip} --region $1 || true
    done
}

function nuke_kinesis_streams {
    echo "Deleting all kinesis in region $1"
    streams=($(aws kinesis list-streams --region $1 | jq '.StreamNames[]' | jq '.' --raw-output ))
    for stream in ${streams[@]}; do
        echo "   Deleting $stream"
        aws kinesis delete-stream --stream-name ${stream} --region $1 || true
    done
}

# Our main function
function aws_nuke {
    regions=(us-east-1 us-east-2 us-west-1 us-west-2 ca-central-1 eu-west-1 eu-central-1 eu-west-2 ap-southeast-1 ap-southeast-2 ap-northeast-2 ap-northeast-1 ap-south-1 sa-east-1)

    for region in ${regions[@]}; do
        echo
        echo "Nuking $region..."
        echo
        set_asgs_num_desired_instances_to_zero "$region"
        nuke_ec2 "$region"
        nuke_elbs "$region"
        nuke_elbsv2 "$region"
        nuke_ebs "$region"
        nuke_eni "$region"
        nuke_elastic_ips "$region"
        nuke_kinesis_streams "$region"

        # Security Groups don't cost money and must be deleted in a sequence that respects their dependencies. Commented
        # out until proper order of delete is implemented.
        #nuke_security_groups "$region"
    done

    # Deleting ASGs after we nuke everything else is a hacky way to give set_asgs_num_desired_instances_to_zero enough
    # time to complete its actions. We sleep an additional 10 seconds before proceeding just to be sure.
    sleep 10

    for region in ${regions[@]}; do
        delete_asgs "$region"
    done
}

aws_nuke

